decl floyd_warshall(g,next, nV){
    var distance = copyof(g);
    var nodes = copyof(next);
    var k = 0;
    var i = 0;
    var j = 0;
    var counter = 0;
    while(k < nV) {
        i = 0;
        while (i < nV){
            j = 0;
            while (j < nV) {
                var update = distance[i][k] + distance[k][j];
                if (update < distance[i][j]){
                    var sublist = distance[i];
                    sublist[j] = update;
                    //println("Update");
                    // Update next node
                    var row = nodes[i];
                    row[j] = nodes[i][k];
                    //nodes[i] = row;
                }
                j = j+1;
                counter = counter + 1;
            }
            i = i+1;
        }
        k=k+1;
    }
    //println("Counter: ");
    //println(counter);
    ret [distance, nodes];
}

decl main() {
    var INF = 999;

    // Graph with costs
    var g = [
                    [ 0,  8,  8,  4,  8, 11, INF,  8,  2,  6,  7,  9, 10],
                    [ 1,  0,  1,  8,  8,  3,  9,  8,  4, 10, 11,  9,  3],
                    [ 6,  8,  0,  7,  5, 10,  6,  6,  1,  7,  9, 11,  9],
                    [ 2,  8,  5,  0,  5,  7,  7,  2,  2,  3,  9,  7,  6],
                    [ 7, 11,  5, 11,  0,  1,  3,  5,  9,  3,  9,  3,  3],
                    [ 8, 11,  9,  3, INF,  0,  9, 11,  4,  3,  8,  8,  3],
                    [ 2, 11,  6,  1,  7,  4,  0,  4,  9,  5,  5, 10, 10],
                    [ 5,  9,  5,  1,  9,  1,  3,  0,  7, 10,  1,  7,  8],
                    [ 6, 10,  9,  1,  6, 11,  6,  2,  0,  9,  INF,  6,  5],
                    [ 6,  5,  3, 10,  4,  5, 11,  2,  4,  0,  6,  2,  7],
                    [ 8,  3,  9, 10,  4, 10,  2, 11,  3,  8,  0, 11,  9],
                    [INF,  4,  7,  2,  6,  8,  5,  6, INF,  8, 11,  0,  8],
                    [ 3,  8,  1, 11,  8,  4,  2,  3,  9,  6, 10,  7,  0]
            ];
    // Node connections
    var n = [[0, 1, 2, 3, 4, 5, -1, 7, 8, 9, 10, 11, 12], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 1, 2, 3, -1, 5, 6, 7, 8, 9, 10, 11, 12], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, 11, 12], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [-1, 1, 2, 3, 4, 5, 6, 7, -1, 9, 10, 11, 12], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]];
    var nV = lenof(g);

    var result =floyd_warshall(g, n, nV);
    //println(result);
    println("Cost:");
    println(result[0]);
    println("Next nodes:");
    println(result[1]);
}

main();
